name: Python CI/CD Pipeline

on: [push, pull_request] 

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository 
      uses: actions/checkout@v4 

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black

    - name: Check code style with Black
      run: |
        black --check belly_project/

    - name: Lint with flake8
      run: |
        flake8 belly_project/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 belly_project/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11'] 
    
    env:
      PYTHONHASHSEED: 0
      RANDOM_SEED: 12345 

    steps:
    - name: Checkout repository 
      uses: actions/checkout@v4 

    - name: Set up Python ${{ matrix.python-version }} 
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies 
      run: |
        python -m pip install --upgrade pip
        pip install -r belly_project/requirements.txt
        pip install pytest-html behave-html-formatter

    - name: Run unit tests with pytest 
      run: |
        cd belly_project
        pytest tests/ --cov=src --cov-report=term-missing --cov-report=xml --html=pytest-report.html --junitxml=pytest-results.xml

    - name: Run ALL BDD tests with behave 
      run: |
        cd belly_project
        behave features/ -f html -o behave-report.html

    - name: Run Mock Time tests
      run: |
        cd belly_project
        python -m pytest tests/test_belly_mock.py -v
        behave features/ --tags=@fake_clock

    - name: Run Spanish BDD tests
      run: |
        cd belly_project
        behave features/ --tags=@language_spanish

    - name: Run English BDD tests
      run: |
        cd belly_project
        behave features/ --tags=@language_english

    - name: Run Performance BDD tests
      run: |
        cd belly_project
        behave features/ --tags=@performance

    - name: Run User Story BDD tests
      run: |
        cd belly_project
        behave features/ --tags=@historia_usuario

    - name: Run TDD-BDD Sequence tests
      run: |
        cd belly_project
        python -m pytest tests/test_belly.py::test_pepinos_restantes tests/test_belly.py::test_pepinos_disponibles -v
        behave features/ --tags=@tdd_sequence

    - name: Run Refactoring tests with coverage
      run: |
        cd belly_project
        python -m pytest tests/test_belly.py::test_esta_gruñendo_limite_exacto tests/test_belly.py::test_esta_gruñendo_tiempo_exacto tests/test_belly.py::test_esta_gruñendo_ambos_limites_fallan -v --cov=src.belly --cov-report=term
        behave features/ --tags=@refactorizacion

    - name: Run New Feature tests (TDD to BDD cycle)
      run: |
        cd belly_project
        python -m pytest tests/test_belly.py::test_tiempo_digestion_pepinos tests/test_belly.py::test_tiempo_digestion_cero_pepinos tests/test_belly.py::test_tiempo_digestion_ya_digerido -v
        behave features/ --tags=@nueva_funcionalidad

    - name: Upload coverage reports to Codecov 
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }} 
        files: ./belly_project/coverage.xml
        fail_ci_if_error: true

    - name: Upload test reports as artifacts 
      uses: actions/upload-artifact@v4
      with:
        name: test-reports-${{ matrix.python-version }}
        path: |
          ./belly_project/pytest-report.html
          ./belly_project/behave-report.html
          ./belly_project/pytest-results.xml
          ./belly_project/coverage.xml

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r belly_project/requirements.txt
          pip install build twine

      - name: Build package
        run: |
          cd belly_project
          python -m build

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Aquí irían los comandos para desplegar a un entorno de staging
          # Por ejemplo:
          # - Configurar credenciales
          # - Copiar archivos a un servidor
          # - Reiniciar servicios

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./belly_project/dist/*
          body: |
            Release ${{ github.ref_name }}
            
            Este release incluye las características de digestión de pepinos
            y mejoras en el rendimiento.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 